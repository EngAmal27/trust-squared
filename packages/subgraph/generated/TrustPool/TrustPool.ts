// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class TrustUpdated extends ethereum.Event {
  get params(): TrustUpdated__Params {
    return new TrustUpdated__Params(this);
  }
}

export class TrustUpdated__Params {
  _event: TrustUpdated;

  constructor(event: TrustUpdated) {
    this._event = event;
  }

  get truster(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get recipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get newTrust(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get totalTrusteeInFlow(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get totalTrusterOutFlow(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get prevTrustScore(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get newTrustScore(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class TrustPool__trustsResult {
  value0: Address;
  value1: BigInt;
  value2: i32;

  constructor(value0: Address, value1: BigInt, value2: i32) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigInt(this.value1));
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2)),
    );
    return map;
  }

  getTrustee(): Address {
    return this.value0;
  }

  getFlowRate(): BigInt {
    return this.value1;
  }

  getIdtype(): i32 {
    return this.value2;
  }
}

export class TrustPool extends ethereum.SmartContract {
  static bind(address: Address): TrustPool {
    return new TrustPool("TrustPool", address);
  }

  CFAV1_TYPE(): Bytes {
    let result = super.call("CFAV1_TYPE", "CFAV1_TYPE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_CFAV1_TYPE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("CFAV1_TYPE", "CFAV1_TYPE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  HOST(): Address {
    let result = super.call("HOST", "HOST():(address)", []);

    return result[0].toAddress();
  }

  try_HOST(): ethereum.CallResult<Address> {
    let result = super.tryCall("HOST", "HOST():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  afterAgreementCreated(
    superToken: Address,
    agreementClass: Address,
    param2: Bytes,
    agreementData: Bytes,
    param4: Bytes,
    ctx: Bytes,
  ): Bytes {
    let result = super.call(
      "afterAgreementCreated",
      "afterAgreementCreated(address,address,bytes32,bytes,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(superToken),
        ethereum.Value.fromAddress(agreementClass),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(agreementData),
        ethereum.Value.fromBytes(param4),
        ethereum.Value.fromBytes(ctx),
      ],
    );

    return result[0].toBytes();
  }

  try_afterAgreementCreated(
    superToken: Address,
    agreementClass: Address,
    param2: Bytes,
    agreementData: Bytes,
    param4: Bytes,
    ctx: Bytes,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "afterAgreementCreated",
      "afterAgreementCreated(address,address,bytes32,bytes,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(superToken),
        ethereum.Value.fromAddress(agreementClass),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(agreementData),
        ethereum.Value.fromBytes(param4),
        ethereum.Value.fromBytes(ctx),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  afterAgreementTerminated(
    superToken: Address,
    agreementClass: Address,
    param2: Bytes,
    agreementData: Bytes,
    cbdata: Bytes,
    ctx: Bytes,
  ): Bytes {
    let result = super.call(
      "afterAgreementTerminated",
      "afterAgreementTerminated(address,address,bytes32,bytes,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(superToken),
        ethereum.Value.fromAddress(agreementClass),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(agreementData),
        ethereum.Value.fromBytes(cbdata),
        ethereum.Value.fromBytes(ctx),
      ],
    );

    return result[0].toBytes();
  }

  try_afterAgreementTerminated(
    superToken: Address,
    agreementClass: Address,
    param2: Bytes,
    agreementData: Bytes,
    cbdata: Bytes,
    ctx: Bytes,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "afterAgreementTerminated",
      "afterAgreementTerminated(address,address,bytes32,bytes,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(superToken),
        ethereum.Value.fromAddress(agreementClass),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(agreementData),
        ethereum.Value.fromBytes(cbdata),
        ethereum.Value.fromBytes(ctx),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  afterAgreementUpdated(
    superToken: Address,
    agreementClass: Address,
    param2: Bytes,
    agreementData: Bytes,
    cbdata: Bytes,
    ctx: Bytes,
  ): Bytes {
    let result = super.call(
      "afterAgreementUpdated",
      "afterAgreementUpdated(address,address,bytes32,bytes,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(superToken),
        ethereum.Value.fromAddress(agreementClass),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(agreementData),
        ethereum.Value.fromBytes(cbdata),
        ethereum.Value.fromBytes(ctx),
      ],
    );

    return result[0].toBytes();
  }

  try_afterAgreementUpdated(
    superToken: Address,
    agreementClass: Address,
    param2: Bytes,
    agreementData: Bytes,
    cbdata: Bytes,
    ctx: Bytes,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "afterAgreementUpdated",
      "afterAgreementUpdated(address,address,bytes32,bytes,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(superToken),
        ethereum.Value.fromAddress(agreementClass),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(agreementData),
        ethereum.Value.fromBytes(cbdata),
        ethereum.Value.fromBytes(ctx),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  beforeAgreementCreated(
    param0: Address,
    param1: Address,
    param2: Bytes,
    param3: Bytes,
    param4: Bytes,
  ): Bytes {
    let result = super.call(
      "beforeAgreementCreated",
      "beforeAgreementCreated(address,address,bytes32,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(param3),
        ethereum.Value.fromBytes(param4),
      ],
    );

    return result[0].toBytes();
  }

  try_beforeAgreementCreated(
    param0: Address,
    param1: Address,
    param2: Bytes,
    param3: Bytes,
    param4: Bytes,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "beforeAgreementCreated",
      "beforeAgreementCreated(address,address,bytes32,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(param3),
        ethereum.Value.fromBytes(param4),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  beforeAgreementTerminated(
    superToken: Address,
    agreementClass: Address,
    param2: Bytes,
    agreementData: Bytes,
    param4: Bytes,
  ): Bytes {
    let result = super.call(
      "beforeAgreementTerminated",
      "beforeAgreementTerminated(address,address,bytes32,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(superToken),
        ethereum.Value.fromAddress(agreementClass),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(agreementData),
        ethereum.Value.fromBytes(param4),
      ],
    );

    return result[0].toBytes();
  }

  try_beforeAgreementTerminated(
    superToken: Address,
    agreementClass: Address,
    param2: Bytes,
    agreementData: Bytes,
    param4: Bytes,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "beforeAgreementTerminated",
      "beforeAgreementTerminated(address,address,bytes32,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(superToken),
        ethereum.Value.fromAddress(agreementClass),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(agreementData),
        ethereum.Value.fromBytes(param4),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  beforeAgreementUpdated(
    superToken: Address,
    agreementClass: Address,
    param2: Bytes,
    agreementData: Bytes,
    param4: Bytes,
  ): Bytes {
    let result = super.call(
      "beforeAgreementUpdated",
      "beforeAgreementUpdated(address,address,bytes32,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(superToken),
        ethereum.Value.fromAddress(agreementClass),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(agreementData),
        ethereum.Value.fromBytes(param4),
      ],
    );

    return result[0].toBytes();
  }

  try_beforeAgreementUpdated(
    superToken: Address,
    agreementClass: Address,
    param2: Bytes,
    agreementData: Bytes,
    param4: Bytes,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "beforeAgreementUpdated",
      "beforeAgreementUpdated(address,address,bytes32,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(superToken),
        ethereum.Value.fromAddress(agreementClass),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(agreementData),
        ethereum.Value.fromBytes(param4),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getConfigWord(
    activateOnCreated: boolean,
    activateOnUpdated: boolean,
    activateOnDeleted: boolean,
  ): BigInt {
    let result = super.call(
      "getConfigWord",
      "getConfigWord(bool,bool,bool):(uint256)",
      [
        ethereum.Value.fromBoolean(activateOnCreated),
        ethereum.Value.fromBoolean(activateOnUpdated),
        ethereum.Value.fromBoolean(activateOnDeleted),
      ],
    );

    return result[0].toBigInt();
  }

  try_getConfigWord(
    activateOnCreated: boolean,
    activateOnUpdated: boolean,
    activateOnDeleted: boolean,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getConfigWord",
      "getConfigWord(bool,bool,bool):(uint256)",
      [
        ethereum.Value.fromBoolean(activateOnCreated),
        ethereum.Value.fromBoolean(activateOnUpdated),
        ethereum.Value.fromBoolean(activateOnDeleted),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMutualId(member1: Address, member2: Address): i32 {
    let result = super.call(
      "getMutualId",
      "getMutualId(address,address):(uint8)",
      [
        ethereum.Value.fromAddress(member1),
        ethereum.Value.fromAddress(member2),
      ],
    );

    return result[0].toI32();
  }

  try_getMutualId(
    member1: Address,
    member2: Address,
  ): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "getMutualId",
      "getMutualId(address,address):(uint8)",
      [
        ethereum.Value.fromAddress(member1),
        ethereum.Value.fromAddress(member2),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  isAcceptedSuperToken(param0: Address): boolean {
    let result = super.call(
      "isAcceptedSuperToken",
      "isAcceptedSuperToken(address):(bool)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBoolean();
  }

  try_isAcceptedSuperToken(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isAcceptedSuperToken",
      "isAcceptedSuperToken(address):(bool)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  memberTrusts(param0: Address, param1: BigInt): Bytes {
    let result = super.call(
      "memberTrusts",
      "memberTrusts(address,uint256):(bytes32)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );

    return result[0].toBytes();
  }

  try_memberTrusts(
    param0: Address,
    param1: BigInt,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "memberTrusts",
      "memberTrusts(address,uint256):(bytes32)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  members(param0: i32, param1: Address): boolean {
    let result = super.call("members", "members(uint8,address):(bool)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0)),
      ethereum.Value.fromAddress(param1),
    ]);

    return result[0].toBoolean();
  }

  try_members(param0: i32, param1: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("members", "members(uint8,address):(bool)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0)),
      ethereum.Value.fromAddress(param1),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  trustScore(param0: Address): BigInt {
    let result = super.call("trustScore", "trustScore(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBigInt();
  }

  try_trustScore(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("trustScore", "trustScore(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  trusts(param0: Bytes): TrustPool__trustsResult {
    let result = super.call("trusts", "trusts(bytes32):(address,int96,uint8)", [
      ethereum.Value.fromFixedBytes(param0),
    ]);

    return new TrustPool__trustsResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toI32(),
    );
  }

  try_trusts(param0: Bytes): ethereum.CallResult<TrustPool__trustsResult> {
    let result = super.tryCall(
      "trusts",
      "trusts(bytes32):(address,int96,uint8)",
      [ethereum.Value.fromFixedBytes(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TrustPool__trustsResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toI32(),
      ),
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get host(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddMemberCall extends ethereum.Call {
  get inputs(): AddMemberCall__Inputs {
    return new AddMemberCall__Inputs(this);
  }

  get outputs(): AddMemberCall__Outputs {
    return new AddMemberCall__Outputs(this);
  }
}

export class AddMemberCall__Inputs {
  _call: AddMemberCall;

  constructor(call: AddMemberCall) {
    this._call = call;
  }

  get member(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get idtype(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class AddMemberCall__Outputs {
  _call: AddMemberCall;

  constructor(call: AddMemberCall) {
    this._call = call;
  }
}

export class AfterAgreementCreatedCall extends ethereum.Call {
  get inputs(): AfterAgreementCreatedCall__Inputs {
    return new AfterAgreementCreatedCall__Inputs(this);
  }

  get outputs(): AfterAgreementCreatedCall__Outputs {
    return new AfterAgreementCreatedCall__Outputs(this);
  }
}

export class AfterAgreementCreatedCall__Inputs {
  _call: AfterAgreementCreatedCall;

  constructor(call: AfterAgreementCreatedCall) {
    this._call = call;
  }

  get superToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get agreementClass(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get agreementData(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get ctx(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class AfterAgreementCreatedCall__Outputs {
  _call: AfterAgreementCreatedCall;

  constructor(call: AfterAgreementCreatedCall) {
    this._call = call;
  }

  get newCtx(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class AfterAgreementTerminatedCall extends ethereum.Call {
  get inputs(): AfterAgreementTerminatedCall__Inputs {
    return new AfterAgreementTerminatedCall__Inputs(this);
  }

  get outputs(): AfterAgreementTerminatedCall__Outputs {
    return new AfterAgreementTerminatedCall__Outputs(this);
  }
}

export class AfterAgreementTerminatedCall__Inputs {
  _call: AfterAgreementTerminatedCall;

  constructor(call: AfterAgreementTerminatedCall) {
    this._call = call;
  }

  get superToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get agreementClass(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get agreementData(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get cbdata(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get ctx(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class AfterAgreementTerminatedCall__Outputs {
  _call: AfterAgreementTerminatedCall;

  constructor(call: AfterAgreementTerminatedCall) {
    this._call = call;
  }

  get newCtx(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class AfterAgreementUpdatedCall extends ethereum.Call {
  get inputs(): AfterAgreementUpdatedCall__Inputs {
    return new AfterAgreementUpdatedCall__Inputs(this);
  }

  get outputs(): AfterAgreementUpdatedCall__Outputs {
    return new AfterAgreementUpdatedCall__Outputs(this);
  }
}

export class AfterAgreementUpdatedCall__Inputs {
  _call: AfterAgreementUpdatedCall;

  constructor(call: AfterAgreementUpdatedCall) {
    this._call = call;
  }

  get superToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get agreementClass(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get agreementData(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get cbdata(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get ctx(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class AfterAgreementUpdatedCall__Outputs {
  _call: AfterAgreementUpdatedCall;

  constructor(call: AfterAgreementUpdatedCall) {
    this._call = call;
  }

  get newCtx(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class SelfRegisterCall extends ethereum.Call {
  get inputs(): SelfRegisterCall__Inputs {
    return new SelfRegisterCall__Inputs(this);
  }

  get outputs(): SelfRegisterCall__Outputs {
    return new SelfRegisterCall__Outputs(this);
  }
}

export class SelfRegisterCall__Inputs {
  _call: SelfRegisterCall;

  constructor(call: SelfRegisterCall) {
    this._call = call;
  }

  get activateOnCreated(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }

  get activateOnUpdated(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }

  get activateOnDeleted(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class SelfRegisterCall__Outputs {
  _call: SelfRegisterCall;

  constructor(call: SelfRegisterCall) {
    this._call = call;
  }
}
